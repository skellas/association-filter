<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ixxus.associationFilter.patch.impl.IxxusAssociationFilterMapper">

    <!--                -->
    <!-- Result Maps    -->
    <!--                -->

    <resultMap id="result_Association" type="AssociationEntity">
        <result property="sourceNodeRef" column="sourceNodeRef" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result property="targetNodeRef" column="targetNodeRef" jdbcType="VARCHAR" javaType="java.lang.String"/>
        <result property="associationType" column="associationType" jdbcType="VARCHAR" javaType="java.lang.String"/>
    </resultMap>

    <select id="selectAssociationFilterByTypeQuery" parameterType="AssociationFilterQueryParameters"
            resultMap="result_Association">
        SELECT DISTINCT
        SourceNodeRef   as "sourceNodeRef",
        TargetNodeRef   as "targetNodeRef",
        AssociationType as "associationType"
        FROM
        view_associations_by_type
        <if test="filtersSize > 0">
            WHERE
            ${filtersString}
        </if>
        ORDER BY
        AssociationType
        ;
    </select>

    <insert id="createNodeRefByIdView" >
        CREATE VIEW view_node_ref_and_id AS
            SELECT
                CONCAT(alf_store.protocol, "://", alf_store.identIFier, "/", alf_node.uuid) AS "NodeRef",
                alf_node.id AS "ID"
            FROM
                alf_node
                INNER JOIN alf_store ON alf_node.store_id = alf_store.id
            WHERE
                alf_store.protocol = "workspace"
        ;
    </insert>
    <insert id="createAssociationByTypeView" >
        CREATE VIEW view_associations_by_type AS
            SELECT
                view_source.NodeRef as "SourceNodeRef",
                alf_qname.local_name COLLATE utf8_general_ci AS "AssociationType",
                view_target.NodeRef as "TargetNodeRef"
            FROM
                alf_node_assoc AS ANA
            JOIN view_node_ref_and_id AS view_source ON ANA.source_node_id = view_source.ID
            JOIN view_node_ref_and_id AS view_target ON ANA.target_node_id = view_target.ID
            JOIN alf_qname ON alf_qname.id = ANA.type_qname_id;
    </insert>

</mapper>